package $classPackage;


#if($hasDtoClasses)
import ${classPackage}.dto.*;
#end
import java.util.List;
import javax.annotation.Generated;

import $baseClassFullName;
#foreach($className in $implementsFullList)
import ${className};
#end

import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;


@Generated(
    value = "com.github.nds842.sqlfirst.apc.SqlFirstAnnotationProcessor"
)
@Repository
public class ${daoClassName} extends ${baseClassSimpleName} implements #foreach($className in $implementsNameList)
${className}#if($foreach.hasNext), #end#end {

    private static final String PACKAGE_NAME = "$classPackage";

#macro( tr $method )
#if(${method.hasResponse()})
        RowMapper<${method.responseClass()}> rowMapper = (resultSet, i) -> {
            ${method.responseClass()} dto = new ${method.responseClass()}();
#foreach ($field in $method.responseParamList)
            dto.set${field.getNameFirstUpper()}(resultSet.get${field.getSimpleTypeName()}(${method.responseClass()}.$field.getNameUnderscores()));
#end
            return dto;
        };
#end
#end

#foreach ($method in $queryDescList)
$method.methodJavadoc
    public #if(${method.hasResponse()})List<${method.responseClass()}>#{else}void#end ${method.methodName}(#if(${method.hasRequest()})${method.requestClass()} req#end) {
#tr()
        #if(${method.hasResponse()})return super.executeQuery#{else}super.execute#{end}(getTemplate(PACKAGE_NAME, "${method.getMethodNameFirstUpper()}")#if(${method.hasRequest()}), req#{end}#if(${method.hasResponse()}), rowMapper#end);
    }

#end}
