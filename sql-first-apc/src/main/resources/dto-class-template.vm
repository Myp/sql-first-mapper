package ${classPackage};

import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import javax.annotation.Generated;

#foreach($className in $implementsFullList)
import ${className};
#end

$classJavadoc
@Generated(
    value = "com.github.nds842.sqlfirst.apc.SqlDaoAnnotationProcessor"
)
public class $dtoClassName extends $baseDtoClass#if($implementsNameList) implements #end#foreach($className in $implementsNameList)
${className}#if($foreach.hasNext), #end
#end {

#foreach ($field in $fields)
    public static final String ${field.getNameUnderscores()} = "${field.getRealName()}";
#end

    private Map<String, Object> map = new HashMap<>();

#foreach ($field in $fields)
    public ${field.getColumnTypeName()} get${field.getNameFirstUpper()}(){
        return getValue(map, ${field.getNameUnderscores()});
    }

    public void set${field.getNameFirstUpper()}(${field.getColumnTypeName()} ${field.getName()}){
         map.put(${field.getNameUnderscores()}, ${field.getName()});
    }

    public $dtoClassName with${field.getNameFirstUpper()}(${field.getColumnTypeName()} ${field.getName()}){
         map.put(${field.getNameUnderscores()}, ${field.getName()});
         return this;
    }

#end
    public Map<String, Object> toMap() {
        return Collections.unmodifiableMap(map);
    }
}